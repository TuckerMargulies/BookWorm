/* tslint:disable:no-implicit-dependencies */
/**
 * BrowserHelper tests
 */

import { test } from "ava";
import { BrowserHelper, CustomError } from "scandit-sdk";

test("checkBrowserCompatibility", t => {
  Object.defineProperty(window.navigator, "userAgent", {
    writable: true
  });
  (<any>window).navigator.userAgent =
    "Mozilla/5.0 (Linux; Android 5.1.1; Nexus 5 Build/LMY48B; wv) " +
    "AppleWebKit / 537.36(KHTML, like Gecko) Version / 4.0 Chrome / 43.0.2357.65 Mobile Safari / 537.36";
  t.deepEqual(
    BrowserHelper.checkBrowserCompatibility(),
    new CustomError({
      name: "UnsupportedBrowserError",
      message: "Media devices are not supported on this OS / Browser (WebView)"
    })
  );
  (<any>window).navigator.userAgent = "";
  (<any>window).Blob = null;

  t.deepEqual(
    BrowserHelper.checkBrowserCompatibility(),
    new CustomError({
      name: "UnsupportedBrowserError",
      message: "Media devices are not supported on this OS / Browser"
    })
  );
  (<any>window.navigator).mediaDevices = {
    getUserMedia: () => {
      return;
    }
  };
  t.deepEqual(
    BrowserHelper.checkBrowserCompatibility(),
    new CustomError({
      name: "UnsupportedBrowserError",
      message: "Web Worker is not supported on this OS / Browser"
    })
  );
  (<any>window).Worker = () => {
    return;
  };
  t.deepEqual(
    BrowserHelper.checkBrowserCompatibility(),
    new CustomError({
      name: "UnsupportedBrowserError",
      message: "WebAssembly is not supported on this OS / Browser"
    })
  );
  (<any>window).WebAssembly = {};
  t.deepEqual(
    BrowserHelper.checkBrowserCompatibility(),
    new CustomError({
      name: "UnsupportedBrowserError",
      message: "Blob object is not supported on this OS / Browser"
    })
  );
  (<any>window).Blob = () => {
    return;
  };
  t.deepEqual(
    BrowserHelper.checkBrowserCompatibility(),
    new CustomError({
      name: "UnsupportedBrowserError",
      message: "URL object is not supported on this OS / Browser"
    })
  );
  (<any>window).URL = {
    createObjectURL: () => {
      return;
    }
  };
  t.deepEqual(BrowserHelper.checkBrowserCompatibility(), undefined);
});

test("getDeviceId", t => {
  const currentDeviceId: string = BrowserHelper.getDeviceId();
  t.regex(currentDeviceId, /[0-9a-f]{40}/);
  t.deepEqual(BrowserHelper.getDeviceId(), currentDeviceId);
});
